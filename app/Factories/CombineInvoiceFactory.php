<?php

namespace App\Factories;

use App\Http\Requests\CombineInvoicesRequest;
use App\Models\Invoice;
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;

class CombineInvoiceFactory extends InvoiceFactory
{
    protected string $invoiceUuid;
    protected ?CombineInvoicesRequest $request = null;
    protected array $validatedData = [];
    /** @var Collection<Invoice> */
    protected Collection $selection;

    // Stores the shared attributes among all the
    // invoices generated by the factory:
    // everything except the uuid and student_id, basically
    protected array $invoiceAttributes = [];
    protected array $invoiceItemAttributes = [];
    protected array $invoiceScholarshipAttributes = [];
    protected array $invoicePaymentScheduleAttributes = [];
    protected array $invoicePaymentTermAttributes = [];
    protected array $invoiceTaxItemAttributes = [];

    protected int $preTaxTotal = 0;
    protected int $subtotal = 0;
    protected int $discountTotal = 0;
    protected int $taxDue = 0;
    protected int $remainingBalance = 0;

    public static function make(CombineInvoicesRequest $request, Collection $selection = null): static
    {
        return (new static)
            ->setSelection($selection)
            ->setRequest($request);
    }

    public function setRequest(CombineInvoicesRequest $request): static
    {
        $this->request = $request;
        $this->validatedData = $request->validated();
        $this->asDraft = $request->boolean('draft');
        $this->school = $request->school();
        $this->user = $request->user();
        $this->invoiceNumberPrefix = $this->school->getInvoiceNumberPrefix($this->user);

        ray('Validated data', $this->validatedData);

        return $this->setTotals()
            ->setInvoiceAttributes()
            ->setPaymentScheduleAttributes();
    }

    /**
     * @param Collection<Invoice>|null $selection
     * @return $this
     */
    public function setSelection(Collection $selection = null): static
    {
        if ($selection) {
            // Only include the invoices which are not void
            $this->selection = $selection
                ->filter(fn (Invoice $invoice) => !$invoice->is_void);
        }

        return $this;
    }

    /**
     * This iterates the selection and stores
     * the various totals needed for calculation
     *
     * @return $this
     */
    protected function setTotals(): static
    {
        $this->selection->each(function (Invoice $invoice) {
            $this->preTaxTotal = $this->preTaxTotal + $invoice->pre_tax_subtotal;
            $this->subtotal = $this->subtotal + $invoice->subtotal;
            $this->discountTotal = $this->discountTotal + $invoice->discount_total;
            $this->taxDue = $this->taxDue + $invoice->tax_due;
            $this->remainingBalance = $this->remainingBalance + $invoice->remaining_balance;
        });

        return $this;
    }

    /**
     * This has to be called after setting invoice items
     * and scholarship items, as it relies on the calculated
     * caches of those functions
     *
     * @return $this
     */
    protected function setInvoiceAttributes(): static
    {
        $this->invoiceAttributes = $this->cleanInvoiceAttributes($this->validatedData);
        $this->invoiceAttributes['uuid'] = $this->uuid();
        $this->invoiceAttributes['batch_id'] = $this->batchId;
        $this->invoiceAttributes['tenant_id'] = $this->school->tenant_id;
        $this->invoiceAttributes['school_id'] = $this->school->id;
        $this->invoiceAttributes['invoice_number'] = Invoice::generateInvoiceNumber($this->invoiceNumberPrefix);
        $this->invoiceAttributes['user_uuid'] = $this->user->id;
        // Invoice date is tricky because it isn't a datetime, just a date
        // So we want to store it as the date the user thinks it is, since
        // we don't know the hour offset to convert it from UTC, so make it
        // a static date that doesn't get converted to a weird day based
        // on an arbitrary timezone and don't convert when displaying
        $this->invoiceAttributes['invoice_date'] = ($this->invoiceAttributes['invoice_date'] ?? null)
            ? Carbon::parse($this->invoiceAttributes['invoice_date'])
                ->setTimezone($this->user->timezone)
                ->format('Y-m-d')
            : now($this->user->timezone)->format('Y-m-d');
        $this->invoiceAttributes['available_at'] = $this->validatedData['available_at']
            ? Carbon::parse($this->validatedData['available_at'])
                ->setTimezone(config('app.timezone'))
                ->toDateTimeString()
            : null;
        $this->invoiceAttributes['due_at'] = $this->validatedData['due_at']
            ? Carbon::parse($this->validatedData['due_at'])
                ->setTimezone(config('app.timezone'))
                ->toDateTimeString()
            : null;
        $this->invoiceAttributes['created_at'] = $this->now;
        $this->invoiceAttributes['updated_at'] = $this->now;

        $this->preTaxTotal = $this->calculateInvoicePreTaxTotal();

        if ($this->invoiceAttributes['notify']) {
            $this->invoiceAttributes['notified_at'] = null;
            $this->invoiceAttributes['notify_at'] = $this->notifyAt;
        }

        $this->setInvoiceTotalsAttributes();

        ray('Invoice attributes', $this->invoiceAttributes);
        return $this;
    }

    protected function setPaymentScheduleAttributes(): static
    {
        foreach ($this->validatedData['payment_schedules'] as $item) {
            $scheduleUuid = $this->uuid();
            $item['uuid'] = $scheduleUuid;
            $item['invoice_uuid'] = $this->invoiceAttributes['uuid'];
            $item['batch_id'] = $this->batchId;
            $item['created_at'] = $this->now;
            $item['updated_at'] = $this->now;
            $item['amount'] = array_reduce(
                $item['terms'],
                fn (int $total, array $term) => $total + (int) $term['amount'],
                0
            );

            collect($item['terms'])->each(function (array $item) use ($scheduleUuid) {
                $item['uuid'] = $this->uuid();
                $item['batch_id'] = $this->batchId;
                $item['invoice_uuid'] = $this->invoiceAttributes['uuid'];
                $item['invoice_payment_schedule_uuid'] = $scheduleUuid;
                $item['amount_due'] = $item['amount'];
                $item['remaining_balance'] = $item['amount'];
                $item['due_at'] = $item['due_at']
                    ? Carbon::parse($item['due_at'])
                        ->setTimezone(config('app.timezone'))
                        ->toDateTimeString()
                    : null;
                $item['created_at'] = $this->now;
                $item['updated_at'] = $this->now;

                $this->invoicePaymentTerms->push($this->cleanPaymentTermAttributes($item));
            });

            $this->invoicePaymentSchedules->push($this->cleanPaymentScheduleAttributes($item));
        }

        return $this;
    }

    protected function calculateInvoicePreTaxTotal(): int
    {
        $total = $this->subtotal - $this->discountTotal;

        return $total > 0
            ? $total
            : 0;
    }

    protected function setInvoiceTotalsAttributes(): static
    {
        $this->invoiceAttributes['subtotal'] = $this->subtotal;
        $this->invoiceAttributes['discount_total'] = $this->discountTotal > $this->subtotal
            ? $this->subtotal
            : $this->discountTotal;
        $this->invoiceAttributes['pre_tax_subtotal'] = $this->preTaxTotal;
        $this->invoiceAttributes['tax_rate'] = 0;
        $this->invoiceAttributes['tax_label'] = null;
        $this->invoiceAttributes['tax_due'] = $this->taxDue;

        $totalDue = $this->preTaxTotal + $this->taxDue;
        $this->invoiceAttributes['amount_due'] = $totalDue;
        $this->invoiceAttributes['remaining_balance'] = $this->remainingBalance;
        $this->invoiceAttributes['relative_tax_rate'] = $totalDue > 0
            ? round($this->taxDue / $totalDue, 8)
            : 0;

        return $this;
    }

    public function build(): Collection
    {
        // Add the invoice attributes
        $publishedAt = $this->asDraft ? null : $this->now;
        $this->invoices->push(array_replace(
            ['published_at' => $publishedAt],
            $this->invoiceAttributes
        ));

        $results = $this->store();

        // Update the selection to include the parent id
        // and match the published status of the parent
        Invoice::whereIn('uuid', $this->selection->pluck('uuid'))
            ->update([
                'parent_uuid' => $this->invoiceAttributes['uuid'],
                'published_at' => $publishedAt,
            ]);

        // Then remove the user's invoice selection
        $this->user->invoiceSelections()->delete();

        // Associate the users to this invoice
        DB::table('invoice_user')
            ->insert(
                array_map(
                    fn ($user) => [
                        'user_uuid' => $user,
                        'invoice_uuid' => $this->invoiceAttributes['uuid'],
                    ],
                    $this->validatedData['users']
                )
            );

        return $results;
    }
}
